/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteOrderDetailArgs } from "./DeleteOrderDetailArgs";
import { OrderDetailFindManyArgs } from "./OrderDetailFindManyArgs";
import { OrderDetailFindUniqueArgs } from "./OrderDetailFindUniqueArgs";
import { OrderDetail } from "./OrderDetail";
import { OrderDetailService } from "../orderDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Orderdetail)
export class OrderDetailResolverBase {
  constructor(
    protected readonly service: OrderDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderDetail",
    action: "read",
    possession: "any",
  })
  async _orderDetailsMeta(
    @graphql.Args() args: OrderDetailFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderDetail])
  @nestAccessControl.UseRoles({
    resource: "OrderDetail",
    action: "read",
    possession: "any",
  })
  async orderDetails(
    @graphql.Args() args: OrderDetailFindManyArgs
  ): Promise<OrderDetail[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderDetail",
    action: "read",
    possession: "own",
  })
  async orderDetail(
    @graphql.Args() args: OrderDetailFindUniqueArgs
  ): Promise<OrderDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrderDetail)
  @nestAccessControl.UseRoles({
    resource: "OrderDetail",
    action: "delete",
    possession: "any",
  })
  async deleteOrderDetail(
    @graphql.Args() args: DeleteOrderDetailArgs
  ): Promise<OrderDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
